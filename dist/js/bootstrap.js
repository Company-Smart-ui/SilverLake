"use strict";function _get(){return _get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var i=_superPropBase(e,t);if(i){var r=Object.getOwnPropertyDescriptor(i,t);return r.get?r.get.call(arguments.length<3?e:n):r.value}},_get.apply(this,arguments)}function _superPropBase(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=_getPrototypeOf(e)););return e}function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_unsupportedIterableToArray(e)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _iterableToArray(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function _arrayWithoutHoles(e){if(Array.isArray(e))return _arrayLikeToArray(e)}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},_setPrototypeOf(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var n,i=_getPrototypeOf(e);if(t){var r=_getPrototypeOf(this).constructor;n=Reflect.construct(i,arguments,r)}else n=i.apply(this,arguments);return _possibleConstructorReturn(this,n)}}function _possibleConstructorReturn(e,t){if(t&&("object"===_typeof(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(e)}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},_getPrototypeOf(e)}function ownKeys(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function _objectSpread(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ownKeys(Object(n),!0).forEach((function(t){_defineProperty(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ownKeys(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function _slicedToArray(e,t){return _arrayWithHoles(e)||_iterableToArrayLimit(e,t)||_unsupportedIterableToArray(e,t)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _iterableToArrayLimit(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var i,r,o=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(i=n.next()).done)&&(o.push(i.value),!t||o.length!==t);a=!0);}catch(e){s=!0,r=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw r}}return o}}function _arrayWithHoles(e){if(Array.isArray(e))return e}function _createForOfIteratorHelper(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=_unsupportedIterableToArray(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var i=0,r=function(){};return{s:r,n:function(){return i>=e.length?{done:!0}:{done:!1,value:e[i++]}},e:function(e){throw e},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){s=!0,o=e},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}function _unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return _arrayLikeToArray(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(e,t):void 0}}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,i=new Array(t);n<t;n++)i[n]=e[n];return i}function _defineProperty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _typeof(e){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_typeof(e)
/*!
  * Bootstrap v5.2.0-beta1 (https://getbootstrap.com/)
  * Copyright 2011-2022 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */}!function(e,t){"object"===("undefined"==typeof exports?"undefined":_typeof(exports))&&"undefined"!=typeof module?module.exports=t(require("@popperjs/core")):"function"==typeof define&&define.amd?define(["@popperjs/core"],t):(e="undefined"!=typeof globalThis?globalThis:e||self).bootstrap=t(e.Popper)}(void 0,(function(e){var t;function n(e){if(e&&e.__esModule)return e;var t=Object.create(null,_defineProperty({},Symbol.toStringTag,{value:"Module"}));if(e){var n=function(n){if("default"!==n){var i=Object.getOwnPropertyDescriptor(e,n);Object.defineProperty(t,n,i.get?i:{enumerable:!0,get:function(){return e[n]}})}};for(var i in e)n(i)}return t.default=e,Object.freeze(t)}var i=n(e),r="transitionend",o=function(e){return null==e?"".concat(e):Object.prototype.toString.call(e).match(/\s([a-z]+)/i)[1].toLowerCase()},a=function(e){var t=e.getAttribute("data-bs-target");if(!t||"#"===t){var n=e.getAttribute("href");if(!n||!n.includes("#")&&!n.startsWith("."))return null;n.includes("#")&&!n.startsWith("#")&&(n="#".concat(n.split("#")[1])),t=n&&"#"!==n?n.trim():null}return t},s=function(e){var t=a(e);return t&&document.querySelector(t)?t:null},l=function(e){var t=a(e);return t?document.querySelector(t):null},c=function(e){if(!e)return 0;var t=window.getComputedStyle(e),n=t.transitionDuration,i=t.transitionDelay,r=Number.parseFloat(n),o=Number.parseFloat(i);return r||o?(n=n.split(",")[0],i=i.split(",")[0],1e3*(Number.parseFloat(n)+Number.parseFloat(i))):0},u=function(e){e.dispatchEvent(new Event(r))},f=function(e){return!(!e||"object"!==_typeof(e))&&(void 0!==e.jquery&&(e=e[0]),void 0!==e.nodeType)},h=function(e){return f(e)?e.jquery?e[0]:e:"string"==typeof e&&e.length>0?document.querySelector(e):null},d=function(e){if(!f(e)||0===e.getClientRects().length)return!1;var t="visible"===getComputedStyle(e).getPropertyValue("visibility"),n=e.closest("details:not([open])");if(!n)return t;if(n!==e){var i=e.closest("summary");if(i&&i.parentNode!==n)return!1;if(null===i)return!1}return t},_=function(e){return!e||e.nodeType!==Node.ELEMENT_NODE||(!!e.classList.contains("disabled")||(void 0!==e.disabled?e.disabled:e.hasAttribute("disabled")&&"false"!==e.getAttribute("disabled")))},p=function e(t){if(!document.documentElement.attachShadow)return null;if("function"==typeof t.getRootNode){var n=t.getRootNode();return n instanceof ShadowRoot?n:null}return t instanceof ShadowRoot?t:t.parentNode?e(t.parentNode):null},v=function(){},g=function(e){e.offsetHeight},m=function(){return window.jQuery&&!document.body.hasAttribute("data-bs-no-jquery")?window.jQuery:null},y=[],b=function(){return"rtl"===document.documentElement.dir},k=function(e){var t;t=function(){var t=m();if(t){var n=e.NAME,i=t.fn[n];t.fn[n]=e.jQueryInterface,t.fn[n].Constructor=e,t.fn[n].noConflict=function(){return t.fn[n]=i,e.jQueryInterface}}},"loading"===document.readyState?(y.length||document.addEventListener("DOMContentLoaded",(function(){var e,t=_createForOfIteratorHelper(y);try{for(t.s();!(e=t.n()).done;)(0,e.value)()}catch(e){t.e(e)}finally{t.f()}})),y.push(t)):t()},w=function(e){"function"==typeof e&&e()},C=function(e,t){var n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];if(n){var i=5,o=c(t)+i,a=!1,s=function n(i){i.target===t&&(a=!0,t.removeEventListener(r,n),w(e))};t.addEventListener(r,s),setTimeout((function(){a||u(t)}),o)}else w(e)},A=function(e,t,n,i){var r=e.length,o=e.indexOf(t);return-1===o?!n&&i?e[r-1]:e[0]:(o+=n?1:-1,i&&(o=(o+r)%r),e[Math.max(0,Math.min(o,r-1))])},T=/[^.]*(?=\..*)\.|.*/,E=/\..*/,O=/::\d+$/,S={},I=1,P={mouseenter:"mouseover",mouseleave:"mouseout"},L=new Set(["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"]);function j(e,t){return t&&"".concat(t,"::").concat(I++)||e.uidEvent||I++}function N(e){var t=j(e);return e.uidEvent=t,S[t]=S[t]||{},S[t]}function D(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;return Object.values(e).find((function(e){return e.originalHandler===t&&e.delegationSelector===n}))}function M(e,t,n){var i="string"==typeof t,r=i?n:t,o=z(e);return L.has(o)||(o=e),[i,r,o]}function H(e,t,n,i,r){if("string"==typeof t&&e){if(n||(n=i,i=null),t in P){var o=function(e){return function(t){if(!t.relatedTarget||t.relatedTarget!==t.delegateTarget&&!t.delegateTarget.contains(t.relatedTarget))return e.call(this,t)}};i?i=o(i):n=o(n)}var a=_slicedToArray(M(t,n,i),3),s=a[0],l=a[1],c=a[2],u=N(e),f=u[c]||(u[c]={}),h=D(f,l,s?n:null);if(h)h.oneOff=h.oneOff&&r;else{var d=j(l,t.replace(T,"")),_=s?function(e,t,n){return function i(r){for(var o=e.querySelectorAll(t),a=r.target;a&&a!==this;a=a.parentNode){var s,l=_createForOfIteratorHelper(o);try{for(l.s();!(s=l.n()).done;)if(s.value===a)return r.delegateTarget=a,i.oneOff&&R.off(e,r.type,t,n),n.apply(a,[r])}catch(e){l.e(e)}finally{l.f()}}}}(e,n,i):function(e,t){return function n(i){return i.delegateTarget=e,n.oneOff&&R.off(e,i.type,t),t.apply(e,[i])}}(e,n);_.delegationSelector=s?n:null,_.originalHandler=l,_.oneOff=r,_.uidEvent=d,f[d]=_,e.addEventListener(c,_,s)}}}function F(e,t,n,i,r){var o=D(t[n],i,r);o&&(e.removeEventListener(n,o,Boolean(r)),delete t[n][o.uidEvent])}function x(e,t,n,i){for(var r=t[n]||{},o=0,a=Object.keys(r);o<a.length;o++){var s=a[o];if(s.includes(i)){var l=r[s];F(e,t,n,l.originalHandler,l.delegationSelector)}}}function z(e){return e=e.replace(E,""),P[e]||e}var R={on:function(e,t,n,i){H(e,t,n,i,!1)},one:function(e,t,n,i){H(e,t,n,i,!0)},off:function(e,t,n,i){if("string"==typeof t&&e){var r=_slicedToArray(M(t,n,i),3),o=r[0],a=r[1],s=r[2],l=s!==t,c=N(e),u=t.startsWith(".");if(void 0===a){if(u)for(var f=0,h=Object.keys(c);f<h.length;f++){x(e,c,h[f],t.slice(1))}for(var d=c[s]||{},_=0,p=Object.keys(d);_<p.length;_++){var v=p[_],g=v.replace(O,"");if(!l||t.includes(g)){var m=d[v];F(e,c,s,m.originalHandler,m.delegationSelector)}}}else{if(!c||!c[s])return;F(e,c,s,a,o?n:null)}}},trigger:function(e,t,n){if("string"!=typeof t||!e)return null;var i=m(),r=null,o=!0,a=!0,s=!1;t!==z(t)&&i&&(r=i.Event(t,n),i(e).trigger(r),o=!r.isPropagationStopped(),a=!r.isImmediatePropagationStopped(),s=r.isDefaultPrevented());var l=new Event(t,{bubbles:o,cancelable:!0});if(void 0!==n)for(var c=function(){var e=f[u];Object.defineProperty(l,e,{get:function(){return n[e]}})},u=0,f=Object.keys(n);u<f.length;u++)c();return s&&l.preventDefault(),a&&e.dispatchEvent(l),l.defaultPrevented&&r&&r.preventDefault(),l}},B=new Map,W=function(e,t,n){B.has(e)||B.set(e,new Map);var i=B.get(e);i.has(t)||0===i.size?i.set(t,n):console.error("Bootstrap doesn't allow more than one instance per element. Bound instance: ".concat(Array.from(i.keys())[0],"."))},q=function(e,t){return B.has(e)&&B.get(e).get(t)||null},K=function(e,t){if(B.has(e)){var n=B.get(e);n.delete(t),0===n.size&&B.delete(e)}};function V(e){if("true"===e)return!0;if("false"===e)return!1;if(e===Number(e).toString())return Number(e);if(""===e||"null"===e)return null;if("string"!=typeof e)return e;try{return JSON.parse(decodeURIComponent(e))}catch(t){return e}}function Q(e){return e.replace(/[A-Z]/g,(function(e){return"-".concat(e.toLowerCase())}))}var X=function(e,t,n){e.setAttribute("data-bs-".concat(Q(t)),n)},Y=function(e,t){e.removeAttribute("data-bs-".concat(Q(t)))},U=function(e){if(!e)return{};var t,n={},i=Object.keys(e.dataset).filter((function(e){return e.startsWith("bs")&&!e.startsWith("bsConfig")})),r=_createForOfIteratorHelper(i);try{for(r.s();!(t=r.n()).done;){var o=t.value,a=o.replace(/^bs/,"");n[a=a.charAt(0).toLowerCase()+a.slice(1,a.length)]=V(e.dataset[o])}}catch(e){r.e(e)}finally{r.f()}return n},$=function(e,t){return V(e.getAttribute("data-bs-".concat(Q(t))))},G=function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"_getConfig",value:function(e){return e=this._mergeConfigObj(e),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}},{key:"_configAfterMerge",value:function(e){return e}},{key:"_mergeConfigObj",value:function(e,t){var n=f(t)?$(t,"config"):{};return _objectSpread(_objectSpread(_objectSpread(_objectSpread({},this.constructor.Default),"object"===_typeof(n)?n:{}),f(t)?U(t):{}),"object"===_typeof(e)?e:{})}},{key:"_typeCheckConfig",value:function(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.constructor.DefaultType,n=0,i=Object.keys(t);n<i.length;n++){var r=i[n],a=t[r],s=e[r],l=f(s)?"element":o(s);if(!new RegExp(a).test(l))throw new TypeError("".concat(this.constructor.NAME.toUpperCase(),': Option "').concat(r,'" provided type "').concat(l,'" but expected type "').concat(a,'".'))}}}],[{key:"Default",get:function(){return{}}},{key:"DefaultType",get:function(){return{}}},{key:"NAME",get:function(){throw new Error('You have to implement the static method "NAME", for each component!')}}]),e}(),J=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,i){var r;return _classCallCheck(this,n),r=t.call(this),(e=h(e))?(r._element=e,r._config=r._getConfig(i),W(r._element,r.constructor.DATA_KEY,_assertThisInitialized(r)),r):_possibleConstructorReturn(r)}return _createClass(n,[{key:"dispose",value:function(){K(this._element,this.constructor.DATA_KEY),R.off(this._element,this.constructor.EVENT_KEY);var e,t=_createForOfIteratorHelper(Object.getOwnPropertyNames(this));try{for(t.s();!(e=t.n()).done;){this[e.value]=null}}catch(e){t.e(e)}finally{t.f()}}},{key:"_queueCallback",value:function(e,t){var n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];C(e,t,n)}},{key:"_getConfig",value:function(e){return e=this._mergeConfigObj(e,this._element),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}}],[{key:"getInstance",value:function(e){return q(h(e),this.DATA_KEY)}},{key:"getOrCreateInstance",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return this.getInstance(e)||new this(e,"object"===_typeof(t)?t:null)}},{key:"VERSION",get:function(){return"5.2.0-beta1"}},{key:"DATA_KEY",get:function(){return"bs.".concat(this.NAME)}},{key:"EVENT_KEY",get:function(){return".".concat(this.DATA_KEY)}},{key:"eventName",value:function(e){return"".concat(e).concat(this.EVENT_KEY)}}]),n}(G),Z=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"hide",n="click.dismiss".concat(e.EVENT_KEY),i=e.NAME;R.on(document,n,'[data-bs-dismiss="'.concat(i,'"]'),(function(n){if(["A","AREA"].includes(this.tagName)&&n.preventDefault(),!_(this)){var r=l(this)||this.closest(".".concat(i));e.getOrCreateInstance(r)[t]()}}))},ee=".".concat("bs.alert"),te="close".concat(ee),ne="closed".concat(ee),ie=function(e){_inherits(n,e);var t=_createSuper(n);function n(){return _classCallCheck(this,n),t.apply(this,arguments)}return _createClass(n,[{key:"close",value:function(){var e=this;if(!R.trigger(this._element,te).defaultPrevented){this._element.classList.remove("show");var t=this._element.classList.contains("fade");this._queueCallback((function(){return e._destroyElement()}),this._element,t)}}},{key:"_destroyElement",value:function(){this._element.remove(),R.trigger(this._element,ne),this.dispose()}}],[{key:"NAME",get:function(){return"alert"}},{key:"jQueryInterface",value:function(e){return this.each((function(){var t=n.getOrCreateInstance(this);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError('No method named "'.concat(e,'"'));t[e](this)}}))}}]),n}(J);Z(ie,"close"),k(ie);var re=".".concat("bs.button"),oe='[data-bs-toggle="button"]',ae="click".concat(re).concat(".data-api"),se=function(e){_inherits(n,e);var t=_createSuper(n);function n(){return _classCallCheck(this,n),t.apply(this,arguments)}return _createClass(n,[{key:"toggle",value:function(){this._element.setAttribute("aria-pressed",this._element.classList.toggle("active"))}}],[{key:"NAME",get:function(){return"button"}},{key:"jQueryInterface",value:function(e){return this.each((function(){var t=n.getOrCreateInstance(this);"toggle"===e&&t[e]()}))}}]),n}(J);R.on(document,ae,oe,(function(e){e.preventDefault();var t=e.target.closest(oe);se.getOrCreateInstance(t).toggle()})),k(se);var le={find:function(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:document.documentElement;return(t=[]).concat.apply(t,_toConsumableArray(Element.prototype.querySelectorAll.call(n,e)))},findOne:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:document.documentElement;return Element.prototype.querySelector.call(t,e)},children:function(e,t){var n;return(n=[]).concat.apply(n,_toConsumableArray(e.children)).filter((function(e){return e.matches(t)}))},parents:function(e,t){for(var n=[],i=e.parentNode.closest(t);i;)n.push(i),i=i.parentNode.closest(t);return n},prev:function(e,t){for(var n=e.previousElementSibling;n;){if(n.matches(t))return[n];n=n.previousElementSibling}return[]},next:function(e,t){for(var n=e.nextElementSibling;n;){if(n.matches(t))return[n];n=n.nextElementSibling}return[]},focusableChildren:function(e){var t=["a","button","input","textarea","select","details","[tabindex]",'[contenteditable="true"]'].map((function(e){return"".concat(e,':not([tabindex^="-"])')})).join(",");return this.find(t,e).filter((function(e){return!_(e)&&d(e)}))}},ce=".bs.swipe",ue="touchstart".concat(ce),fe="touchmove".concat(ce),he="touchend".concat(ce),de="pointerdown".concat(ce),_e="pointerup".concat(ce),pe={leftCallback:null,rightCallback:null,endCallback:null},ve={leftCallback:"(function|null)",rightCallback:"(function|null)",endCallback:"(function|null)"},ge=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,i){var r;return _classCallCheck(this,n),(r=t.call(this))._element=e,e&&n.isSupported()?(r._config=r._getConfig(i),r._deltaX=0,r._supportPointerEvents=Boolean(window.PointerEvent),r._initEvents(),r):_possibleConstructorReturn(r)}return _createClass(n,[{key:"dispose",value:function(){R.off(this._element,ce)}},{key:"_start",value:function(e){this._supportPointerEvents?this._eventIsPointerPenTouch(e)&&(this._deltaX=e.clientX):this._deltaX=e.touches[0].clientX}},{key:"_end",value:function(e){this._eventIsPointerPenTouch(e)&&(this._deltaX=e.clientX-this._deltaX),this._handleSwipe(),w(this._config.endCallback)}},{key:"_move",value:function(e){this._deltaX=e.touches&&e.touches.length>1?0:e.touches[0].clientX-this._deltaX}},{key:"_handleSwipe",value:function(){var e=Math.abs(this._deltaX);if(!(e<=40)){var t=e/this._deltaX;this._deltaX=0,t&&w(t>0?this._config.rightCallback:this._config.leftCallback)}}},{key:"_initEvents",value:function(){var e=this;this._supportPointerEvents?(R.on(this._element,de,(function(t){return e._start(t)})),R.on(this._element,_e,(function(t){return e._end(t)})),this._element.classList.add("pointer-event")):(R.on(this._element,ue,(function(t){return e._start(t)})),R.on(this._element,fe,(function(t){return e._move(t)})),R.on(this._element,he,(function(t){return e._end(t)})))}},{key:"_eventIsPointerPenTouch",value:function(e){return this._supportPointerEvents&&("pen"===e.pointerType||"touch"===e.pointerType)}}],[{key:"Default",get:function(){return pe}},{key:"DefaultType",get:function(){return ve}},{key:"NAME",get:function(){return"swipe"}},{key:"isSupported",value:function(){return"ontouchstart"in document.documentElement||navigator.maxTouchPoints>0}}]),n}(G),me=".".concat("bs.carousel"),ye=".data-api",be="next",ke="prev",we="left",Ce="right",Ae="slide".concat(me),Te="slid".concat(me),Ee="keydown".concat(me),Oe="mouseenter".concat(me),Se="mouseleave".concat(me),Ie="dragstart".concat(me),Pe="load".concat(me).concat(ye),Le="click".concat(me).concat(ye),je="carousel",Ne="active",De="carousel-item-end",Me="carousel-item-start",He="carousel-item-next",Fe="carousel-item-prev",xe=".active",ze=".carousel-item",Re=(_defineProperty(t={},"ArrowLeft",Ce),_defineProperty(t,"ArrowRight",we),t),Be={interval:5e3,keyboard:!0,pause:"hover",ride:!1,touch:!0,wrap:!0},We={interval:"(number|boolean)",keyboard:"boolean",ride:"(boolean|string)",pause:"(string|boolean)",touch:"boolean",wrap:"boolean"},qe=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,i){var r;return _classCallCheck(this,n),(r=t.call(this,e,i))._interval=null,r._activeElement=null,r._isSliding=!1,r.touchTimeout=null,r._swipeHelper=null,r._indicatorsElement=le.findOne(".carousel-indicators",r._element),r._addEventListeners(),r._config.ride===je&&r.cycle(),r}return _createClass(n,[{key:"next",value:function(){this._slide(be)}},{key:"nextWhenVisible",value:function(){!document.hidden&&d(this._element)&&this.next()}},{key:"prev",value:function(){this._slide(ke)}},{key:"pause",value:function(){this._isSliding&&u(this._element),this._clearInterval()}},{key:"cycle",value:function(){var e=this;this._clearInterval(),this._updateInterval(),this._interval=setInterval((function(){return e.nextWhenVisible()}),this._config.interval)}},{key:"_maybeEnableCycle",value:function(){var e=this;this._config.ride&&(this._isSliding?R.one(this._element,Te,(function(){return e.cycle()})):this.cycle())}},{key:"to",value:function(e){var t=this,n=this._getItems();if(!(e>n.length-1||e<0))if(this._isSliding)R.one(this._element,Te,(function(){return t.to(e)}));else{var i=this._getItemIndex(this._getActive());if(i!==e){var r=e>i?be:ke;this._slide(r,n[e])}}}},{key:"dispose",value:function(){this._swipeHelper&&this._swipeHelper.dispose(),_get(_getPrototypeOf(n.prototype),"dispose",this).call(this)}},{key:"_configAfterMerge",value:function(e){return e.defaultInterval=e.interval,e}},{key:"_addEventListeners",value:function(){var e=this;this._config.keyboard&&R.on(this._element,Ee,(function(t){return e._keydown(t)})),"hover"===this._config.pause&&(R.on(this._element,Oe,(function(){return e.pause()})),R.on(this._element,Se,(function(){return e._maybeEnableCycle()}))),this._config.touch&&ge.isSupported()&&this._addTouchEventListeners()}},{key:"_addTouchEventListeners",value:function(){var e,t=this,n=_createForOfIteratorHelper(le.find(".carousel-item img",this._element));try{for(n.s();!(e=n.n()).done;){var i=e.value;R.on(i,Ie,(function(e){return e.preventDefault()}))}}catch(e){n.e(e)}finally{n.f()}var r={leftCallback:function(){return t._slide(t._directionToOrder(we))},rightCallback:function(){return t._slide(t._directionToOrder(Ce))},endCallback:function(){"hover"===t._config.pause&&(t.pause(),t.touchTimeout&&clearTimeout(t.touchTimeout),t.touchTimeout=setTimeout((function(){return t._maybeEnableCycle()}),500+t._config.interval))}};this._swipeHelper=new ge(this._element,r)}},{key:"_keydown",value:function(e){if(!/input|textarea/i.test(e.target.tagName)){var t=Re[e.key];t&&(e.preventDefault(),this._slide(this._directionToOrder(t)))}}},{key:"_getItemIndex",value:function(e){return this._getItems().indexOf(e)}},{key:"_setActiveIndicatorElement",value:function(e){if(this._indicatorsElement){var t=le.findOne(xe,this._indicatorsElement);t.classList.remove(Ne),t.removeAttribute("aria-current");var n=le.findOne('[data-bs-slide-to="'.concat(e,'"]'),this._indicatorsElement);n&&(n.classList.add(Ne),n.setAttribute("aria-current","true"))}}},{key:"_updateInterval",value:function(){var e=this._activeElement||this._getActive();if(e){var t=Number.parseInt(e.getAttribute("data-bs-interval"),10);this._config.interval=t||this._config.defaultInterval}}},{key:"_slide",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;if(!this._isSliding){var i=this._getActive(),r=e===be,o=n||A(this._getItems(),i,r,this._config.wrap);if(o!==i){var a=this._getItemIndex(o),s=function(n){return R.trigger(t._element,n,{relatedTarget:o,direction:t._orderToDirection(e),from:t._getItemIndex(i),to:a})},l=s(Ae);if(!l.defaultPrevented&&i&&o){var c=Boolean(this._interval);this.pause(),this._isSliding=!0,this._setActiveIndicatorElement(a),this._activeElement=o;var u=r?Me:De,f=r?He:Fe;o.classList.add(f),g(o),i.classList.add(u),o.classList.add(u);var h=function(){o.classList.remove(u,f),o.classList.add(Ne),i.classList.remove(Ne,f,u),t._isSliding=!1,s(Te)};this._queueCallback(h,i,this._isAnimated()),c&&this.cycle()}}}}},{key:"_isAnimated",value:function(){return this._element.classList.contains("slide")}},{key:"_getActive",value:function(){return le.findOne(".active.carousel-item",this._element)}},{key:"_getItems",value:function(){return le.find(ze,this._element)}},{key:"_clearInterval",value:function(){this._interval&&(clearInterval(this._interval),this._interval=null)}},{key:"_directionToOrder",value:function(e){return b()?e===we?ke:be:e===we?be:ke}},{key:"_orderToDirection",value:function(e){return b()?e===ke?we:Ce:e===ke?Ce:we}}],[{key:"Default",get:function(){return Be}},{key:"DefaultType",get:function(){return We}},{key:"NAME",get:function(){return"carousel"}},{key:"jQueryInterface",value:function(e){return this.each((function(){var t=n.getOrCreateInstance(this,e);if("number"!=typeof e){if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError('No method named "'.concat(e,'"'));t[e]()}}else t.to(e)}))}}]),n}(J);R.on(document,Le,"[data-bs-slide], [data-bs-slide-to]",(function(e){var t=l(this);if(t&&t.classList.contains(je)){e.preventDefault();var n=qe.getOrCreateInstance(t),i=this.getAttribute("data-bs-slide-to");if(i)return n.to(i),void n._maybeEnableCycle();if("next"===$(this,"slide"))return n.next(),void n._maybeEnableCycle();n.prev(),n._maybeEnableCycle()}})),R.on(window,Pe,(function(){var e,t=_createForOfIteratorHelper(le.find('[data-bs-ride="carousel"]'));try{for(t.s();!(e=t.n()).done;){var n=e.value;qe.getOrCreateInstance(n)}}catch(e){t.e(e)}finally{t.f()}})),k(qe);var Ke=".".concat("bs.collapse"),Ve="show".concat(Ke),Qe="shown".concat(Ke),Xe="hide".concat(Ke),Ye="hidden".concat(Ke),Ue="click".concat(Ke).concat(".data-api"),$e="show",Ge="collapse",Je="collapsing",Ze=":scope .".concat(Ge," .").concat(Ge),et='[data-bs-toggle="collapse"]',tt={toggle:!0,parent:null},nt={toggle:"boolean",parent:"(null|element)"},it=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,i){var r;_classCallCheck(this,n),(r=t.call(this,e,i))._isTransitioning=!1,r._triggerArray=[];var o,a=_createForOfIteratorHelper(le.find(et));try{for(a.s();!(o=a.n()).done;){var l=o.value,c=s(l),u=le.find(c).filter((function(e){return e===r._element}));null!==c&&u.length&&r._triggerArray.push(l)}}catch(e){a.e(e)}finally{a.f()}return r._initializeChildren(),r._config.parent||r._addAriaAndCollapsedClass(r._triggerArray,r._isShown()),r._config.toggle&&r.toggle(),r}return _createClass(n,[{key:"toggle",value:function(){this._isShown()?this.hide():this.show()}},{key:"show",value:function(){var e=this;if(!this._isTransitioning&&!this._isShown()){var t=[];if(this._config.parent&&(t=this._getFirstLevelChildren(".collapse.show, .collapse.collapsing").filter((function(t){return t!==e._element})).map((function(e){return n.getOrCreateInstance(e,{toggle:!1})}))),!t.length||!t[0]._isTransitioning)if(!R.trigger(this._element,Ve).defaultPrevented){var i,r=_createForOfIteratorHelper(t);try{for(r.s();!(i=r.n()).done;){i.value.hide()}}catch(e){r.e(e)}finally{r.f()}var o=this._getDimension();this._element.classList.remove(Ge),this._element.classList.add(Je),this._element.style[o]=0,this._addAriaAndCollapsedClass(this._triggerArray,!0),this._isTransitioning=!0;var a=o[0].toUpperCase()+o.slice(1),s="scroll".concat(a);this._queueCallback((function(){e._isTransitioning=!1,e._element.classList.remove(Je),e._element.classList.add(Ge,$e),e._element.style[o]="",R.trigger(e._element,Qe)}),this._element,!0),this._element.style[o]="".concat(this._element[s],"px")}}}},{key:"hide",value:function(){var e=this;if(!this._isTransitioning&&this._isShown()&&!R.trigger(this._element,Xe).defaultPrevented){var t=this._getDimension();this._element.style[t]="".concat(this._element.getBoundingClientRect()[t],"px"),g(this._element),this._element.classList.add(Je),this._element.classList.remove(Ge,$e);var n,i=_createForOfIteratorHelper(this._triggerArray);try{for(i.s();!(n=i.n()).done;){var r=n.value,o=l(r);o&&!this._isShown(o)&&this._addAriaAndCollapsedClass([r],!1)}}catch(e){i.e(e)}finally{i.f()}this._isTransitioning=!0;this._element.style[t]="",this._queueCallback((function(){e._isTransitioning=!1,e._element.classList.remove(Je),e._element.classList.add(Ge),R.trigger(e._element,Ye)}),this._element,!0)}}},{key:"_isShown",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._element;return e.classList.contains($e)}},{key:"_configAfterMerge",value:function(e){return e.toggle=Boolean(e.toggle),e.parent=h(e.parent),e}},{key:"_getDimension",value:function(){return this._element.classList.contains("collapse-horizontal")?"width":"height"}},{key:"_initializeChildren",value:function(){if(this._config.parent){var e,t=_createForOfIteratorHelper(this._getFirstLevelChildren(et));try{for(t.s();!(e=t.n()).done;){var n=e.value,i=l(n);i&&this._addAriaAndCollapsedClass([n],this._isShown(i))}}catch(e){t.e(e)}finally{t.f()}}}},{key:"_getFirstLevelChildren",value:function(e){var t=le.find(Ze,this._config.parent);return le.find(e,this._config.parent).filter((function(e){return!t.includes(e)}))}},{key:"_addAriaAndCollapsedClass",value:function(e,t){if(e.length){var n,i=_createForOfIteratorHelper(e);try{for(i.s();!(n=i.n()).done;){var r=n.value;r.classList.toggle("collapsed",!t),r.setAttribute("aria-expanded",t)}}catch(e){i.e(e)}finally{i.f()}}}}],[{key:"Default",get:function(){return tt}},{key:"DefaultType",get:function(){return nt}},{key:"NAME",get:function(){return"collapse"}},{key:"jQueryInterface",value:function(e){var t={};return"string"==typeof e&&/show|hide/.test(e)&&(t.toggle=!1),this.each((function(){var i=n.getOrCreateInstance(this,t);if("string"==typeof e){if(void 0===i[e])throw new TypeError('No method named "'.concat(e,'"'));i[e]()}}))}}]),n}(J);R.on(document,Ue,et,(function(e){("A"===e.target.tagName||e.delegateTarget&&"A"===e.delegateTarget.tagName)&&e.preventDefault();var t,n=s(this),i=_createForOfIteratorHelper(le.find(n));try{for(i.s();!(t=i.n()).done;){var r=t.value;it.getOrCreateInstance(r,{toggle:!1}).toggle()}}catch(e){i.e(e)}finally{i.f()}})),k(it);var rt="dropdown",ot=".".concat("bs.dropdown"),at=".data-api",st="ArrowUp",lt="ArrowDown",ct="hide".concat(ot),ut="hidden".concat(ot),ft="show".concat(ot),ht="shown".concat(ot),dt="click".concat(ot).concat(at),_t="keydown".concat(ot).concat(at),pt="keyup".concat(ot).concat(at),vt="show",gt='[data-bs-toggle="dropdown"]:not(.disabled):not(:disabled)',mt="".concat(gt,".").concat(vt),yt=".dropdown-menu",bt=b()?"top-end":"top-start",kt=b()?"top-start":"top-end",wt=b()?"bottom-end":"bottom-start",Ct=b()?"bottom-start":"bottom-end",At=b()?"left-start":"right-start",Tt=b()?"right-start":"left-start",Et={offset:[0,2],boundary:"clippingParents",reference:"toggle",display:"dynamic",popperConfig:null,autoClose:!0},Ot={offset:"(array|string|function)",boundary:"(string|element)",reference:"(string|element|object)",display:"string",popperConfig:"(null|object|function)",autoClose:"(boolean|string)"},St=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,i){var r;return _classCallCheck(this,n),(r=t.call(this,e,i))._popper=null,r._parent=r._element.parentNode,r._menu=le.findOne(yt,r._parent),r._inNavbar=r._detectNavbar(),r}return _createClass(n,[{key:"toggle",value:function(){return this._isShown()?this.hide():this.show()}},{key:"show",value:function(){if(!_(this._element)&&!this._isShown()){var e={relatedTarget:this._element};if(!R.trigger(this._element,ft,e).defaultPrevented){if(this._createPopper(),"ontouchstart"in document.documentElement&&!this._parent.closest(".navbar-nav")){var t,n,i=_createForOfIteratorHelper((t=[]).concat.apply(t,_toConsumableArray(document.body.children)));try{for(i.s();!(n=i.n()).done;){var r=n.value;R.on(r,"mouseover",v)}}catch(e){i.e(e)}finally{i.f()}}this._element.focus(),this._element.setAttribute("aria-expanded",!0),this._menu.classList.add(vt),this._element.classList.add(vt),R.trigger(this._element,ht,e)}}}},{key:"hide",value:function(){if(!_(this._element)&&this._isShown()){var e={relatedTarget:this._element};this._completeHide(e)}}},{key:"dispose",value:function(){this._popper&&this._popper.destroy(),_get(_getPrototypeOf(n.prototype),"dispose",this).call(this)}},{key:"update",value:function(){this._inNavbar=this._detectNavbar(),this._popper&&this._popper.update()}},{key:"_completeHide",value:function(e){if(!R.trigger(this._element,ct,e).defaultPrevented){if("ontouchstart"in document.documentElement){var t,n,i=_createForOfIteratorHelper((t=[]).concat.apply(t,_toConsumableArray(document.body.children)));try{for(i.s();!(n=i.n()).done;){var r=n.value;R.off(r,"mouseover",v)}}catch(e){i.e(e)}finally{i.f()}}this._popper&&this._popper.destroy(),this._menu.classList.remove(vt),this._element.classList.remove(vt),this._element.setAttribute("aria-expanded","false"),Y(this._menu,"popper"),R.trigger(this._element,ut,e)}}},{key:"_getConfig",value:function(e){if("object"===_typeof((e=_get(_getPrototypeOf(n.prototype),"_getConfig",this).call(this,e)).reference)&&!f(e.reference)&&"function"!=typeof e.reference.getBoundingClientRect)throw new TypeError("".concat(rt.toUpperCase(),': Option "reference" provided type "object" without a required "getBoundingClientRect" method.'));return e}},{key:"_createPopper",value:function(){if(void 0===i)throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");var e=this._element;"parent"===this._config.reference?e=this._parent:f(this._config.reference)?e=h(this._config.reference):"object"===_typeof(this._config.reference)&&(e=this._config.reference);var t=this._getPopperConfig();this._popper=i.createPopper(e,this._menu,t)}},{key:"_isShown",value:function(){return this._menu.classList.contains(vt)}},{key:"_getPlacement",value:function(){var e=this._parent;if(e.classList.contains("dropend"))return At;if(e.classList.contains("dropstart"))return Tt;if(e.classList.contains("dropup-center"))return"top";if(e.classList.contains("dropdown-center"))return"bottom";var t="end"===getComputedStyle(this._menu).getPropertyValue("--bs-position").trim();return e.classList.contains("dropup")?t?kt:bt:t?Ct:wt}},{key:"_detectNavbar",value:function(){return null!==this._element.closest(".navbar")}},{key:"_getOffset",value:function(){var e=this,t=this._config.offset;return"string"==typeof t?t.split(",").map((function(e){return Number.parseInt(e,10)})):"function"==typeof t?function(n){return t(n,e._element)}:t}},{key:"_getPopperConfig",value:function(){var e={placement:this._getPlacement(),modifiers:[{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"offset",options:{offset:this._getOffset()}}]};return(this._inNavbar||"static"===this._config.display)&&(X(this._menu,"popper","static"),e.modifiers=[{name:"applyStyles",enabled:!1}]),_objectSpread(_objectSpread({},e),"function"==typeof this._config.popperConfig?this._config.popperConfig(e):this._config.popperConfig)}},{key:"_selectMenuItem",value:function(e){var t=e.key,n=e.target,i=le.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",this._menu).filter((function(e){return d(e)}));i.length&&A(i,n,t===lt,!i.includes(n)).focus()}}],[{key:"Default",get:function(){return Et}},{key:"DefaultType",get:function(){return Ot}},{key:"NAME",get:function(){return rt}},{key:"jQueryInterface",value:function(e){return this.each((function(){var t=n.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError('No method named "'.concat(e,'"'));t[e]()}}))}},{key:"clearMenus",value:function(e){if(2!==e.button&&("keyup"!==e.type||"Tab"===e.key)){var t,i=_createForOfIteratorHelper(le.find(mt));try{for(i.s();!(t=i.n()).done;){var r=t.value,o=n.getInstance(r);if(o&&!1!==o._config.autoClose){var a=e.composedPath(),s=a.includes(o._menu);if(!(a.includes(o._element)||"inside"===o._config.autoClose&&!s||"outside"===o._config.autoClose&&s||o._menu.contains(e.target)&&("keyup"===e.type&&"Tab"===e.key||/input|select|option|textarea|form/i.test(e.target.tagName)))){var l={relatedTarget:o._element};"click"===e.type&&(l.clickEvent=e),o._completeHide(l)}}}}catch(e){i.e(e)}finally{i.f()}}}},{key:"dataApiKeydownHandler",value:function(e){var t=/input|textarea/i.test(e.target.tagName),i="Escape"===e.key,r=[st,lt].includes(e.key);if((r||i)&&(!t||i)){e.preventDefault();var o=le.findOne(gt,e.delegateTarget.parentNode),a=n.getOrCreateInstance(o);if(r)return e.stopPropagation(),a.show(),void a._selectMenuItem(e);a._isShown()&&(e.stopPropagation(),a.hide(),o.focus())}}}]),n}(J);R.on(document,_t,gt,St.dataApiKeydownHandler),R.on(document,_t,yt,St.dataApiKeydownHandler),R.on(document,dt,St.clearMenus),R.on(document,pt,St.clearMenus),R.on(document,dt,gt,(function(e){e.preventDefault(),St.getOrCreateInstance(this).toggle()})),k(St);var It=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",Pt=".sticky-top",Lt="padding-right",jt="margin-right",Nt=function(){function e(){_classCallCheck(this,e),this._element=document.body}return _createClass(e,[{key:"getWidth",value:function(){var e=document.documentElement.clientWidth;return Math.abs(window.innerWidth-e)}},{key:"hide",value:function(){var e=this.getWidth();this._disableOverFlow(),this._setElementAttributes(this._element,Lt,(function(t){return t+e})),this._setElementAttributes(It,Lt,(function(t){return t+e})),this._setElementAttributes(Pt,jt,(function(t){return t-e}))}},{key:"reset",value:function(){this._resetElementAttributes(this._element,"overflow"),this._resetElementAttributes(this._element,Lt),this._resetElementAttributes(It,Lt),this._resetElementAttributes(Pt,jt)}},{key:"isOverflowing",value:function(){return this.getWidth()>0}},{key:"_disableOverFlow",value:function(){this._saveInitialAttribute(this._element,"overflow"),this._element.style.overflow="hidden"}},{key:"_setElementAttributes",value:function(e,t,n){var i=this,r=this.getWidth();this._applyManipulationCallback(e,(function(e){if(!(e!==i._element&&window.innerWidth>e.clientWidth+r)){i._saveInitialAttribute(e,t);var o=window.getComputedStyle(e).getPropertyValue(t);e.style.setProperty(t,"".concat(n(Number.parseFloat(o)),"px"))}}))}},{key:"_saveInitialAttribute",value:function(e,t){var n=e.style.getPropertyValue(t);n&&X(e,t,n)}},{key:"_resetElementAttributes",value:function(e,t){this._applyManipulationCallback(e,(function(e){var n=$(e,t);null!==n?(Y(e,t),e.style.setProperty(t,n)):e.style.removeProperty(t)}))}},{key:"_applyManipulationCallback",value:function(e,t){if(f(e))t(e);else{var n,i=_createForOfIteratorHelper(le.find(e,this._element));try{for(i.s();!(n=i.n()).done;){t(n.value)}}catch(e){i.e(e)}finally{i.f()}}}}]),e}(),Dt="backdrop",Mt="show",Ht="mousedown.bs.".concat(Dt),Ft={className:"modal-backdrop",isVisible:!0,isAnimated:!1,rootElement:"body",clickCallback:null},xt={className:"string",isVisible:"boolean",isAnimated:"boolean",rootElement:"(element|string)",clickCallback:"(function|null)"},zt=function(e){_inherits(n,e);var t=_createSuper(n);function n(e){var i;return _classCallCheck(this,n),(i=t.call(this))._config=i._getConfig(e),i._isAppended=!1,i._element=null,i}return _createClass(n,[{key:"show",value:function(e){if(this._config.isVisible){this._append();var t=this._getElement();this._config.isAnimated&&g(t),t.classList.add(Mt),this._emulateAnimation((function(){w(e)}))}else w(e)}},{key:"hide",value:function(e){var t=this;this._config.isVisible?(this._getElement().classList.remove(Mt),this._emulateAnimation((function(){t.dispose(),w(e)}))):w(e)}},{key:"dispose",value:function(){this._isAppended&&(R.off(this._element,Ht),this._element.remove(),this._isAppended=!1)}},{key:"_getElement",value:function(){if(!this._element){var e=document.createElement("div");e.className=this._config.className,this._config.isAnimated&&e.classList.add("fade"),this._element=e}return this._element}},{key:"_configAfterMerge",value:function(e){return e.rootElement=h(e.rootElement),e}},{key:"_append",value:function(){var e=this;if(!this._isAppended){var t=this._getElement();this._config.rootElement.append(t),R.on(t,Ht,(function(){w(e._config.clickCallback)})),this._isAppended=!0}}},{key:"_emulateAnimation",value:function(e){C(e,this._getElement(),this._config.isAnimated)}}],[{key:"Default",get:function(){return Ft}},{key:"DefaultType",get:function(){return xt}},{key:"NAME",get:function(){return Dt}}]),n}(G),Rt=".".concat("bs.focustrap"),Bt="focusin".concat(Rt),Wt="keydown.tab".concat(Rt),qt="backward",Kt={trapElement:null,autofocus:!0},Vt={trapElement:"element",autofocus:"boolean"},Qt=function(e){_inherits(n,e);var t=_createSuper(n);function n(e){var i;return _classCallCheck(this,n),(i=t.call(this))._config=i._getConfig(e),i._isActive=!1,i._lastTabNavDirection=null,i}return _createClass(n,[{key:"activate",value:function(){var e=this;this._isActive||(this._config.autofocus&&this._config.trapElement.focus(),R.off(document,Rt),R.on(document,Bt,(function(t){return e._handleFocusin(t)})),R.on(document,Wt,(function(t){return e._handleKeydown(t)})),this._isActive=!0)}},{key:"deactivate",value:function(){this._isActive&&(this._isActive=!1,R.off(document,Rt))}},{key:"_handleFocusin",value:function(e){var t=this._config.trapElement;if(e.target!==document&&e.target!==t&&!t.contains(e.target)){var n=le.focusableChildren(t);0===n.length?t.focus():this._lastTabNavDirection===qt?n[n.length-1].focus():n[0].focus()}}},{key:"_handleKeydown",value:function(e){"Tab"===e.key&&(this._lastTabNavDirection=e.shiftKey?qt:"forward")}}],[{key:"Default",get:function(){return Kt}},{key:"DefaultType",get:function(){return Vt}},{key:"NAME",get:function(){return"focustrap"}}]),n}(G),Xt=".".concat("bs.modal"),Yt="hide".concat(Xt),Ut="hidePrevented".concat(Xt),$t="hidden".concat(Xt),Gt="show".concat(Xt),Jt="shown".concat(Xt),Zt="resize".concat(Xt),en="click.dismiss".concat(Xt),tn="keydown.dismiss".concat(Xt),nn="click".concat(Xt).concat(".data-api"),rn="modal-open",on="show",an="modal-static",sn={backdrop:!0,keyboard:!0,focus:!0},ln={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean"},cn=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,i){var r;return _classCallCheck(this,n),(r=t.call(this,e,i))._dialog=le.findOne(".modal-dialog",r._element),r._backdrop=r._initializeBackDrop(),r._focustrap=r._initializeFocusTrap(),r._isShown=!1,r._isTransitioning=!1,r._scrollBar=new Nt,r._addEventListeners(),r}return _createClass(n,[{key:"toggle",value:function(e){return this._isShown?this.hide():this.show(e)}},{key:"show",value:function(e){var t=this;this._isShown||this._isTransitioning||(R.trigger(this._element,Gt,{relatedTarget:e}).defaultPrevented||(this._isShown=!0,this._isTransitioning=!0,this._scrollBar.hide(),document.body.classList.add(rn),this._adjustDialog(),this._backdrop.show((function(){return t._showElement(e)}))))}},{key:"hide",value:function(){var e=this;this._isShown&&!this._isTransitioning&&(R.trigger(this._element,Yt).defaultPrevented||(this._isShown=!1,this._isTransitioning=!0,this._focustrap.deactivate(),this._element.classList.remove(on),this._queueCallback((function(){return e._hideModal()}),this._element,this._isAnimated())))}},{key:"dispose",value:function(){for(var e=0,t=[window,this._dialog];e<t.length;e++){var i=t[e];R.off(i,Xt)}this._backdrop.dispose(),this._focustrap.deactivate(),_get(_getPrototypeOf(n.prototype),"dispose",this).call(this)}},{key:"handleUpdate",value:function(){this._adjustDialog()}},{key:"_initializeBackDrop",value:function(){return new zt({isVisible:Boolean(this._config.backdrop),isAnimated:this._isAnimated()})}},{key:"_initializeFocusTrap",value:function(){return new Qt({trapElement:this._element})}},{key:"_showElement",value:function(e){var t=this;document.body.contains(this._element)||document.body.append(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.scrollTop=0;var n=le.findOne(".modal-body",this._dialog);n&&(n.scrollTop=0),g(this._element),this._element.classList.add(on);this._queueCallback((function(){t._config.focus&&t._focustrap.activate(),t._isTransitioning=!1,R.trigger(t._element,Jt,{relatedTarget:e})}),this._dialog,this._isAnimated())}},{key:"_addEventListeners",value:function(){var e=this;R.on(this._element,tn,(function(t){if("Escape"===t.key)return e._config.keyboard?(t.preventDefault(),void e.hide()):void e._triggerBackdropTransition()})),R.on(window,Zt,(function(){e._isShown&&!e._isTransitioning&&e._adjustDialog()})),R.on(this._element,en,(function(t){t.target===t.currentTarget&&("static"!==e._config.backdrop?e._config.backdrop&&e.hide():e._triggerBackdropTransition())}))}},{key:"_hideModal",value:function(){var e=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._backdrop.hide((function(){document.body.classList.remove(rn),e._resetAdjustments(),e._scrollBar.reset(),R.trigger(e._element,$t)}))}},{key:"_isAnimated",value:function(){return this._element.classList.contains("fade")}},{key:"_triggerBackdropTransition",value:function(){var e=this;if(!R.trigger(this._element,Ut).defaultPrevented){var t=this._element.scrollHeight>document.documentElement.clientHeight,n=this._element.style.overflowY;"hidden"===n||this._element.classList.contains(an)||(t||(this._element.style.overflowY="hidden"),this._element.classList.add(an),this._queueCallback((function(){e._element.classList.remove(an),e._queueCallback((function(){e._element.style.overflowY=n}),e._dialog)}),this._dialog),this._element.focus())}}},{key:"_adjustDialog",value:function(){var e=this._element.scrollHeight>document.documentElement.clientHeight,t=this._scrollBar.getWidth(),n=t>0;if(n&&!e){var i=b()?"paddingLeft":"paddingRight";this._element.style[i]="".concat(t,"px")}if(!n&&e){var r=b()?"paddingRight":"paddingLeft";this._element.style[r]="".concat(t,"px")}}},{key:"_resetAdjustments",value:function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""}}],[{key:"Default",get:function(){return sn}},{key:"DefaultType",get:function(){return ln}},{key:"NAME",get:function(){return"modal"}},{key:"jQueryInterface",value:function(e,t){return this.each((function(){var i=n.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===i[e])throw new TypeError('No method named "'.concat(e,'"'));i[e](t)}}))}}]),n}(J);R.on(document,nn,'[data-bs-toggle="modal"]',(function(e){var t=this,n=l(this);["A","AREA"].includes(this.tagName)&&e.preventDefault(),R.one(n,Gt,(function(e){e.defaultPrevented||R.one(n,$t,(function(){d(t)&&t.focus()}))}));var i=le.findOne(".modal.show");i&&cn.getInstance(i).hide(),cn.getOrCreateInstance(n).toggle(this)})),Z(cn),k(cn);var un=".".concat("bs.offcanvas"),fn=".data-api",hn="load".concat(un).concat(fn),dn="show",_n="showing",pn="hiding",vn=".offcanvas.show",gn="show".concat(un),mn="shown".concat(un),yn="hide".concat(un),bn="hidePrevented".concat(un),kn="hidden".concat(un),wn="resize".concat(un),Cn="click".concat(un).concat(fn),An="keydown.dismiss".concat(un),Tn={backdrop:!0,keyboard:!0,scroll:!1},En={backdrop:"(boolean|string)",keyboard:"boolean",scroll:"boolean"},On=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,i){var r;return _classCallCheck(this,n),(r=t.call(this,e,i))._isShown=!1,r._backdrop=r._initializeBackDrop(),r._focustrap=r._initializeFocusTrap(),r._addEventListeners(),r}return _createClass(n,[{key:"toggle",value:function(e){return this._isShown?this.hide():this.show(e)}},{key:"show",value:function(e){var t=this;if(!this._isShown&&!R.trigger(this._element,gn,{relatedTarget:e}).defaultPrevented){this._isShown=!0,this._backdrop.show(),this._config.scroll||(new Nt).hide(),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.classList.add(_n);this._queueCallback((function(){t._config.scroll||t._focustrap.activate(),t._element.classList.add(dn),t._element.classList.remove(_n),R.trigger(t._element,mn,{relatedTarget:e})}),this._element,!0)}}},{key:"hide",value:function(){var e=this;if(this._isShown&&!R.trigger(this._element,yn).defaultPrevented){this._focustrap.deactivate(),this._element.blur(),this._isShown=!1,this._element.classList.add(pn),this._backdrop.hide();this._queueCallback((function(){e._element.classList.remove(dn,pn),e._element.removeAttribute("aria-modal"),e._element.removeAttribute("role"),e._config.scroll||(new Nt).reset(),R.trigger(e._element,kn)}),this._element,!0)}}},{key:"dispose",value:function(){this._backdrop.dispose(),this._focustrap.deactivate(),_get(_getPrototypeOf(n.prototype),"dispose",this).call(this)}},{key:"_initializeBackDrop",value:function(){var e=this,t=Boolean(this._config.backdrop);return new zt({className:"offcanvas-backdrop",isVisible:t,isAnimated:!0,rootElement:this._element.parentNode,clickCallback:t?function(){"static"!==e._config.backdrop?e.hide():R.trigger(e._element,bn)}:null})}},{key:"_initializeFocusTrap",value:function(){return new Qt({trapElement:this._element})}},{key:"_addEventListeners",value:function(){var e=this;R.on(this._element,An,(function(t){"Escape"===t.key&&(e._config.keyboard?e.hide():R.trigger(e._element,bn))}))}}],[{key:"Default",get:function(){return Tn}},{key:"DefaultType",get:function(){return En}},{key:"NAME",get:function(){return"offcanvas"}},{key:"jQueryInterface",value:function(e){return this.each((function(){var t=n.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError('No method named "'.concat(e,'"'));t[e](this)}}))}}]),n}(J);R.on(document,Cn,'[data-bs-toggle="offcanvas"]',(function(e){var t=this,n=l(this);if(["A","AREA"].includes(this.tagName)&&e.preventDefault(),!_(this)){R.one(n,kn,(function(){d(t)&&t.focus()}));var i=le.findOne(vn);i&&i!==n&&On.getInstance(i).hide(),On.getOrCreateInstance(n).toggle(this)}})),R.on(window,hn,(function(){var e,t=_createForOfIteratorHelper(le.find(vn));try{for(t.s();!(e=t.n()).done;){var n=e.value;On.getOrCreateInstance(n).show()}}catch(e){t.e(e)}finally{t.f()}})),R.on(window,wn,(function(){var e,t=_createForOfIteratorHelper(le.find("[aria-modal][class*=show][class*=offcanvas-]"));try{for(t.s();!(e=t.n()).done;){var n=e.value;"fixed"!==getComputedStyle(n).position&&On.getOrCreateInstance(n).hide()}}catch(e){t.e(e)}finally{t.f()}})),Z(On),k(On);var Sn=new Set(["background","cite","href","itemtype","longdesc","poster","src","xlink:href"]),In=/^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i,Pn=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i,Ln=function(e,t){var n=e.nodeName.toLowerCase();return t.includes(n)?!Sn.has(n)||Boolean(In.test(e.nodeValue)||Pn.test(e.nodeValue)):t.filter((function(e){return e instanceof RegExp})).some((function(e){return e.test(n)}))},jn={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]};var Nn={extraClass:"",template:"<div></div>",content:{},html:!1,sanitize:!0,sanitizeFn:null,allowList:jn},Dn={extraClass:"(string|function)",template:"string",content:"object",html:"boolean",sanitize:"boolean",sanitizeFn:"(null|function)",allowList:"object"},Mn={selector:"(string|element)",entry:"(string|element|function|null)"},Hn=function(e){_inherits(n,e);var t=_createSuper(n);function n(e){var i;return _classCallCheck(this,n),(i=t.call(this))._config=i._getConfig(e),i}return _createClass(n,[{key:"getContent",value:function(){var e=this;return Object.values(this._config.content).map((function(t){return e._resolvePossibleFunction(t)})).filter(Boolean)}},{key:"hasContent",value:function(){return this.getContent().length>0}},{key:"changeContent",value:function(e){return this._checkContent(e),this._config.content=_objectSpread(_objectSpread({},this._config.content),e),this}},{key:"toHtml",value:function(){var e=document.createElement("div");e.innerHTML=this._maybeSanitize(this._config.template);for(var t=0,n=Object.entries(this._config.content);t<n.length;t++){var i=_slicedToArray(n[t],2),r=i[0],o=i[1];this._setContent(e,o,r)}var a,s=e.children[0],l=this._resolvePossibleFunction(this._config.extraClass);l&&(a=s.classList).add.apply(a,_toConsumableArray(l.split(" ")));return s}},{key:"_typeCheckConfig",value:function(e){_get(_getPrototypeOf(n.prototype),"_typeCheckConfig",this).call(this,e),this._checkContent(e.content)}},{key:"_checkContent",value:function(e){for(var t=0,i=Object.entries(e);t<i.length;t++){var r=_slicedToArray(i[t],2),o=r[0],a=r[1];_get(_getPrototypeOf(n.prototype),"_typeCheckConfig",this).call(this,{selector:o,entry:a},Mn)}}},{key:"_setContent",value:function(e,t,n){var i=le.findOne(n,e);i&&((t=this._resolvePossibleFunction(t))?f(t)?this._putElementInTemplate(h(t),i):this._config.html?i.innerHTML=this._maybeSanitize(t):i.textContent=t:i.remove())}},{key:"_maybeSanitize",value:function(e){return this._config.sanitize?function(e,t,n){var i;if(!e.length)return e;if(n&&"function"==typeof n)return n(e);var r,o=(new window.DOMParser).parseFromString(e,"text/html"),a=_createForOfIteratorHelper((i=[]).concat.apply(i,_toConsumableArray(o.body.querySelectorAll("*"))));try{for(a.s();!(r=a.n()).done;){var s,l=r.value,c=l.nodeName.toLowerCase();if(Object.keys(t).includes(c)){var u,f=(s=[]).concat.apply(s,_toConsumableArray(l.attributes)),h=[].concat(t["*"]||[],t[c]||[]),d=_createForOfIteratorHelper(f);try{for(d.s();!(u=d.n()).done;){var _=u.value;Ln(_,h)||l.removeAttribute(_.nodeName)}}catch(e){d.e(e)}finally{d.f()}}else l.remove()}}catch(e){a.e(e)}finally{a.f()}return o.body.innerHTML}(e,this._config.allowList,this._config.sanitizeFn):e}},{key:"_resolvePossibleFunction",value:function(e){return"function"==typeof e?e(this):e}},{key:"_putElementInTemplate",value:function(e,t){if(this._config.html)return t.innerHTML="",void t.append(e);t.textContent=e.textContent}}],[{key:"Default",get:function(){return Nn}},{key:"DefaultType",get:function(){return Dn}},{key:"NAME",get:function(){return"TemplateFactory"}}]),n}(G),Fn=new Set(["sanitize","allowList","sanitizeFn"]),xn="fade",zn="show",Rn=".".concat("modal"),Bn="hide.bs.modal",Wn="hover",qn="focus",Kn={AUTO:"auto",TOP:"top",RIGHT:b()?"left":"right",BOTTOM:"bottom",LEFT:b()?"right":"left"},Vn={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:[0,0],container:!1,fallbackPlacements:["top","right","bottom","left"],boundary:"clippingParents",customClass:"",sanitize:!0,sanitizeFn:null,allowList:jn,popperConfig:null},Qn={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(array|string|function)",container:"(string|element|boolean)",fallbackPlacements:"array",boundary:"(string|element)",customClass:"(string|function)",sanitize:"boolean",sanitizeFn:"(null|function)",allowList:"object",popperConfig:"(null|object|function)"},Xn=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,r){var o;if(_classCallCheck(this,n),void 0===i)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");return(o=t.call(this,e,r))._isEnabled=!0,o._timeout=0,o._isHovered=!1,o._activeTrigger={},o._popper=null,o._templateFactory=null,o.tip=null,o._setListeners(),o}return _createClass(n,[{key:"enable",value:function(){this._isEnabled=!0}},{key:"disable",value:function(){this._isEnabled=!1}},{key:"toggleEnabled",value:function(){this._isEnabled=!this._isEnabled}},{key:"toggle",value:function(e){if(this._isEnabled){if(e){var t=this._initializeOnDelegatedTarget(e);return t._activeTrigger.click=!t._activeTrigger.click,void(t._isWithActiveTrigger()?t._enter():t._leave())}this._isShown()?this._leave():this._enter()}}},{key:"dispose",value:function(){clearTimeout(this._timeout),R.off(this._element.closest(Rn),Bn,this._hideModalHandler),this.tip&&this.tip.remove(),this._disposePopper(),_get(_getPrototypeOf(n.prototype),"dispose",this).call(this)}},{key:"show",value:function(){var e=this;if("none"===this._element.style.display)throw new Error("Please use show on visible elements");if(this._isWithContent()&&this._isEnabled){var t=R.trigger(this._element,this.constructor.eventName("show")),n=(p(this._element)||this._element.ownerDocument.documentElement).contains(this._element);if(!t.defaultPrevented&&n){var i=this._getTipElement();this._element.setAttribute("aria-describedby",i.getAttribute("id"));var r=this._config.container;if(this._element.ownerDocument.documentElement.contains(this.tip)||(r.append(i),R.trigger(this._element,this.constructor.eventName("inserted"))),this._popper?this._popper.update():this._createPopper(i),i.classList.add(zn),"ontouchstart"in document.documentElement){var o,a,s=_createForOfIteratorHelper((o=[]).concat.apply(o,_toConsumableArray(document.body.children)));try{for(s.s();!(a=s.n()).done;){var l=a.value;R.on(l,"mouseover",v)}}catch(e){s.e(e)}finally{s.f()}}this._queueCallback((function(){var t=e._isHovered;e._isHovered=!1,R.trigger(e._element,e.constructor.eventName("shown")),t&&e._leave()}),this.tip,this._isAnimated())}}}},{key:"hide",value:function(){var e=this;if(this._isShown()&&!R.trigger(this._element,this.constructor.eventName("hide")).defaultPrevented){var t=this._getTipElement();if(t.classList.remove(zn),"ontouchstart"in document.documentElement){var n,i,r=_createForOfIteratorHelper((n=[]).concat.apply(n,_toConsumableArray(document.body.children)));try{for(r.s();!(i=r.n()).done;){var o=i.value;R.off(o,"mouseover",v)}}catch(e){r.e(e)}finally{r.f()}}this._activeTrigger.click=!1,this._activeTrigger.focus=!1,this._activeTrigger.hover=!1,this._isHovered=!1;this._queueCallback((function(){e._isWithActiveTrigger()||(e._isHovered||t.remove(),e._element.removeAttribute("aria-describedby"),R.trigger(e._element,e.constructor.eventName("hidden")),e._disposePopper())}),this.tip,this._isAnimated())}}},{key:"update",value:function(){this._popper&&this._popper.update()}},{key:"_isWithContent",value:function(){return Boolean(this._getTitle())}},{key:"_getTipElement",value:function(){return this.tip||(this.tip=this._createTipElement(this._getContentForTemplate())),this.tip}},{key:"_createTipElement",value:function(e){var t=this._getTemplateFactory(e).toHtml();if(!t)return null;t.classList.remove(xn,zn),t.classList.add("bs-".concat(this.constructor.NAME,"-auto"));var n=function(e){do{e+=Math.floor(1e6*Math.random())}while(document.getElementById(e));return e}(this.constructor.NAME).toString();return t.setAttribute("id",n),this._isAnimated()&&t.classList.add(xn),t}},{key:"setContent",value:function(e){var t=!1;this.tip&&(t=this._isShown(),this.tip.remove(),this.tip=null),this._disposePopper(),this.tip=this._createTipElement(e),t&&this.show()}},{key:"_getTemplateFactory",value:function(e){return this._templateFactory?this._templateFactory.changeContent(e):this._templateFactory=new Hn(_objectSpread(_objectSpread({},this._config),{},{content:e,extraClass:this._resolvePossibleFunction(this._config.customClass)})),this._templateFactory}},{key:"_getContentForTemplate",value:function(){return _defineProperty({},".tooltip-inner",this._getTitle())}},{key:"_getTitle",value:function(){return this._config.title}},{key:"_initializeOnDelegatedTarget",value:function(e){return this.constructor.getOrCreateInstance(e.delegateTarget,this._getDelegateConfig())}},{key:"_isAnimated",value:function(){return this._config.animation||this.tip&&this.tip.classList.contains(xn)}},{key:"_isShown",value:function(){return this.tip&&this.tip.classList.contains(zn)}},{key:"_createPopper",value:function(e){var t="function"==typeof this._config.placement?this._config.placement.call(this,e,this._element):this._config.placement,n=Kn[t.toUpperCase()];this._popper=i.createPopper(this._element,e,this._getPopperConfig(n))}},{key:"_getOffset",value:function(){var e=this,t=this._config.offset;return"string"==typeof t?t.split(",").map((function(e){return Number.parseInt(e,10)})):"function"==typeof t?function(n){return t(n,e._element)}:t}},{key:"_resolvePossibleFunction",value:function(e){return"function"==typeof e?e.call(this._element):e}},{key:"_getPopperConfig",value:function(e){var t=this,n={placement:e,modifiers:[{name:"flip",options:{fallbackPlacements:this._config.fallbackPlacements}},{name:"offset",options:{offset:this._getOffset()}},{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"arrow",options:{element:".".concat(this.constructor.NAME,"-arrow")}},{name:"preSetPlacement",enabled:!0,phase:"beforeMain",fn:function(e){t._getTipElement().setAttribute("data-popper-placement",e.state.placement)}}]};return _objectSpread(_objectSpread({},n),"function"==typeof this._config.popperConfig?this._config.popperConfig(n):this._config.popperConfig)}},{key:"_setListeners",value:function(){var e,t=this,n=_createForOfIteratorHelper(this._config.trigger.split(" "));try{for(n.s();!(e=n.n()).done;){var i=e.value;if("click"===i)R.on(this._element,this.constructor.eventName("click"),this._config.selector,(function(e){return t.toggle(e)}));else if("manual"!==i){var r=i===Wn?this.constructor.eventName("mouseenter"):this.constructor.eventName("focusin"),o=i===Wn?this.constructor.eventName("mouseleave"):this.constructor.eventName("focusout");R.on(this._element,r,this._config.selector,(function(e){var n=t._initializeOnDelegatedTarget(e);n._activeTrigger["focusin"===e.type?qn:Wn]=!0,n._enter()})),R.on(this._element,o,this._config.selector,(function(e){var n=t._initializeOnDelegatedTarget(e);n._activeTrigger["focusout"===e.type?qn:Wn]=n._element.contains(e.relatedTarget),n._leave()}))}}}catch(e){n.e(e)}finally{n.f()}this._hideModalHandler=function(){t._element&&t.hide()},R.on(this._element.closest(Rn),Bn,this._hideModalHandler),this._config.selector?this._config=_objectSpread(_objectSpread({},this._config),{},{trigger:"manual",selector:""}):this._fixTitle()}},{key:"_fixTitle",value:function(){var e=this._config.originalTitle;e&&(this._element.getAttribute("aria-label")||this._element.textContent||this._element.setAttribute("aria-label",e),this._element.removeAttribute("title"))}},{key:"_enter",value:function(){var e=this;this._isShown()||this._isHovered?this._isHovered=!0:(this._isHovered=!0,this._setTimeout((function(){e._isHovered&&e.show()}),this._config.delay.show))}},{key:"_leave",value:function(){var e=this;this._isWithActiveTrigger()||(this._isHovered=!1,this._setTimeout((function(){e._isHovered||e.hide()}),this._config.delay.hide))}},{key:"_setTimeout",value:function(e,t){clearTimeout(this._timeout),this._timeout=setTimeout(e,t)}},{key:"_isWithActiveTrigger",value:function(){return Object.values(this._activeTrigger).includes(!0)}},{key:"_getConfig",value:function(e){for(var t=U(this._element),n=0,i=Object.keys(t);n<i.length;n++){var r=i[n];Fn.has(r)&&delete t[r]}return e=_objectSpread(_objectSpread({},t),"object"===_typeof(e)&&e?e:{}),e=this._mergeConfigObj(e),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}},{key:"_configAfterMerge",value:function(e){return e.container=!1===e.container?document.body:h(e.container),"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),e.originalTitle=this._element.getAttribute("title")||"",e.title=this._resolvePossibleFunction(e.title)||e.originalTitle,"number"==typeof e.title&&(e.title=e.title.toString()),"number"==typeof e.content&&(e.content=e.content.toString()),e}},{key:"_getDelegateConfig",value:function(){var e={};for(var t in this._config)this.constructor.Default[t]!==this._config[t]&&(e[t]=this._config[t]);return e}},{key:"_disposePopper",value:function(){this._popper&&(this._popper.destroy(),this._popper=null)}}],[{key:"Default",get:function(){return Vn}},{key:"DefaultType",get:function(){return Qn}},{key:"NAME",get:function(){return"tooltip"}},{key:"jQueryInterface",value:function(e){return this.each((function(){var t=n.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError('No method named "'.concat(e,'"'));t[e]()}}))}}]),n}(J);k(Xn);var Yn=_objectSpread(_objectSpread({},Xn.Default),{},{placement:"right",offset:[0,8],trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),Un=_objectSpread(_objectSpread({},Xn.DefaultType),{},{content:"(null|string|element|function)"}),$n=function(e){_inherits(n,e);var t=_createSuper(n);function n(){return _classCallCheck(this,n),t.apply(this,arguments)}return _createClass(n,[{key:"_isWithContent",value:function(){return this._getTitle()||this._getContent()}},{key:"_getContentForTemplate",value:function(){var e;return _defineProperty(e={},".popover-header",this._getTitle()),_defineProperty(e,".popover-body",this._getContent()),e}},{key:"_getContent",value:function(){return this._resolvePossibleFunction(this._config.content)}}],[{key:"Default",get:function(){return Yn}},{key:"DefaultType",get:function(){return Un}},{key:"NAME",get:function(){return"popover"}},{key:"jQueryInterface",value:function(e){return this.each((function(){var t=n.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError('No method named "'.concat(e,'"'));t[e]()}}))}}]),n}(Xn);k($n);var Gn=".".concat("bs.scrollspy"),Jn="activate".concat(Gn),Zn="click".concat(Gn),ei="load".concat(Gn).concat(".data-api"),ti="active",ni="[href]",ii=".nav-link",ri="".concat(ii,", ").concat(".nav-item"," > ").concat(ii,", ").concat(".list-group-item"),oi={offset:null,rootMargin:"0px 0px -25%",smoothScroll:!1,target:null},ai={offset:"(number|null)",rootMargin:"string",smoothScroll:"boolean",target:"element"},si=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,i){var r;return _classCallCheck(this,n),(r=t.call(this,e,i))._targetLinks=new Map,r._observableSections=new Map,r._rootElement="visible"===getComputedStyle(r._element).overflowY?null:r._element,r._activeTarget=null,r._observer=null,r._previousScrollData={visibleEntryTop:0,parentScrollTop:0},r.refresh(),r}return _createClass(n,[{key:"refresh",value:function(){this._initializeTargetsAndObservables(),this._maybeEnableSmoothScroll(),this._observer?this._observer.disconnect():this._observer=this._getNewObserver();var e,t=_createForOfIteratorHelper(this._observableSections.values());try{for(t.s();!(e=t.n()).done;){var n=e.value;this._observer.observe(n)}}catch(e){t.e(e)}finally{t.f()}}},{key:"dispose",value:function(){this._observer.disconnect(),_get(_getPrototypeOf(n.prototype),"dispose",this).call(this)}},{key:"_configAfterMerge",value:function(e){return e.target=h(e.target)||document.body,e}},{key:"_maybeEnableSmoothScroll",value:function(){var e=this;this._config.smoothScroll&&(R.off(this._config.target,Zn),R.on(this._config.target,Zn,ni,(function(t){var n=e._observableSections.get(t.target.hash);if(n){t.preventDefault();var i=e._rootElement||window,r=n.offsetTop-e._element.offsetTop;if(i.scrollTo)return void i.scrollTo({top:r});i.scrollTop=r}})))}},{key:"_getNewObserver",value:function(){var e=this,t={root:this._rootElement,threshold:[.1,.5,1],rootMargin:this._getRootMargin()};return new IntersectionObserver((function(t){return e._observerCallback(t)}),t)}},{key:"_observerCallback",value:function(e){var t=this,n=function(e){return t._targetLinks.get("#".concat(e.target.id))},i=function(e){t._previousScrollData.visibleEntryTop=e.target.offsetTop,t._process(n(e))},r=(this._rootElement||document.documentElement).scrollTop,o=r>=this._previousScrollData.parentScrollTop;this._previousScrollData.parentScrollTop=r;var a,s=_createForOfIteratorHelper(e);try{for(s.s();!(a=s.n()).done;){var l=a.value;if(l.isIntersecting){var c=l.target.offsetTop>=this._previousScrollData.visibleEntryTop;if(o&&c){if(i(l),!r)return}else o||c||i(l)}else this._activeTarget=null,this._clearActiveClass(n(l))}}catch(e){s.e(e)}finally{s.f()}}},{key:"_getRootMargin",value:function(){return this._config.offset?"".concat(this._config.offset,"px 0px -30%"):this._config.rootMargin}},{key:"_initializeTargetsAndObservables",value:function(){this._targetLinks=new Map,this._observableSections=new Map;var e,t=_createForOfIteratorHelper(le.find(ni,this._config.target));try{for(t.s();!(e=t.n()).done;){var n=e.value;if(n.hash&&!_(n)){var i=le.findOne(n.hash,this._element);d(i)&&(this._targetLinks.set(n.hash,n),this._observableSections.set(n.hash,i))}}}catch(e){t.e(e)}finally{t.f()}}},{key:"_process",value:function(e){this._activeTarget!==e&&(this._clearActiveClass(this._config.target),this._activeTarget=e,e.classList.add(ti),this._activateParents(e),R.trigger(this._element,Jn,{relatedTarget:e}))}},{key:"_activateParents",value:function(e){if(e.classList.contains("dropdown-item"))le.findOne(".dropdown-toggle",e.closest(".dropdown")).classList.add(ti);else{var t,n=_createForOfIteratorHelper(le.parents(e,".nav, .list-group"));try{for(n.s();!(t=n.n()).done;){var i,r=t.value,o=_createForOfIteratorHelper(le.prev(r,ri));try{for(o.s();!(i=o.n()).done;){i.value.classList.add(ti)}}catch(e){o.e(e)}finally{o.f()}}}catch(e){n.e(e)}finally{n.f()}}}},{key:"_clearActiveClass",value:function(e){e.classList.remove(ti);var t,n=_createForOfIteratorHelper(le.find("".concat(ni,".").concat(ti),e));try{for(n.s();!(t=n.n()).done;){t.value.classList.remove(ti)}}catch(e){n.e(e)}finally{n.f()}}}],[{key:"Default",get:function(){return oi}},{key:"DefaultType",get:function(){return ai}},{key:"NAME",get:function(){return"scrollspy"}},{key:"jQueryInterface",value:function(e){return this.each((function(){var t=n.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError('No method named "'.concat(e,'"'));t[e]()}}))}}]),n}(J);R.on(window,ei,(function(){var e,t=_createForOfIteratorHelper(le.find('[data-bs-spy="scroll"]'));try{for(t.s();!(e=t.n()).done;){var n=e.value;si.getOrCreateInstance(n)}}catch(e){t.e(e)}finally{t.f()}})),k(si);var li=".".concat("bs.tab"),ci="hide".concat(li),ui="hidden".concat(li),fi="show".concat(li),hi="shown".concat(li),di="click".concat(li),_i="keydown".concat(li),pi="load".concat(li),vi="ArrowLeft",gi="ArrowRight",mi="ArrowUp",yi="ArrowDown",bi="active",ki="fade",wi="show",Ci=":not(.dropdown-toggle)",Ai=".nav-link".concat(Ci,", .list-group-item").concat(Ci,', [role="tab"]').concat(Ci),Ti='[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',Ei="".concat(Ai,", ").concat(Ti),Oi=".".concat(bi,'[data-bs-toggle="tab"], .').concat(bi,'[data-bs-toggle="pill"], .').concat(bi,'[data-bs-toggle="list"]'),Si=function(e){_inherits(n,e);var t=_createSuper(n);function n(e){var i;return _classCallCheck(this,n),(i=t.call(this,e))._parent=i._element.closest('.list-group, .nav, [role="tablist"]'),i._parent?(i._setInitialAttributes(i._parent,i._getChildren()),R.on(i._element,_i,(function(e){return i._keydown(e)})),i):_possibleConstructorReturn(i)}return _createClass(n,[{key:"show",value:function(){var e=this._element;if(!this._elemIsActive(e)){var t=this._getActiveElem(),n=t?R.trigger(t,ci,{relatedTarget:e}):null;R.trigger(e,fi,{relatedTarget:t}).defaultPrevented||n&&n.defaultPrevented||(this._deactivate(t,e),this._activate(e,t))}}},{key:"_activate",value:function(e,t){var n=this;if(e){e.classList.add(bi),this._activate(l(e));var i=e.classList.contains(ki);this._queueCallback((function(){i&&e.classList.add(wi),"tab"===e.getAttribute("role")&&(e.focus(),e.removeAttribute("tabindex"),e.setAttribute("aria-selected",!0),n._toggleDropDown(e,!0),R.trigger(e,hi,{relatedTarget:t}))}),e,i)}}},{key:"_deactivate",value:function(e,t){var n=this;if(e){e.classList.remove(bi),e.blur(),this._deactivate(l(e));var i=e.classList.contains(ki);this._queueCallback((function(){i&&e.classList.remove(wi),"tab"===e.getAttribute("role")&&(e.setAttribute("aria-selected",!1),e.setAttribute("tabindex","-1"),n._toggleDropDown(e,!1),R.trigger(e,ui,{relatedTarget:t}))}),e,i)}}},{key:"_keydown",value:function(e){if([vi,gi,mi,yi].includes(e.key)){e.stopPropagation(),e.preventDefault();var t=[gi,yi].includes(e.key),i=A(this._getChildren().filter((function(e){return!_(e)})),e.target,t,!0);i&&n.getOrCreateInstance(i).show()}}},{key:"_getChildren",value:function(){return le.find(Ei,this._parent)}},{key:"_getActiveElem",value:function(){var e=this;return this._getChildren().find((function(t){return e._elemIsActive(t)}))||null}},{key:"_setInitialAttributes",value:function(e,t){this._setAttributeIfNotExists(e,"role","tablist");var n,i=_createForOfIteratorHelper(t);try{for(i.s();!(n=i.n()).done;){var r=n.value;this._setInitialAttributesOnChild(r)}}catch(e){i.e(e)}finally{i.f()}}},{key:"_setInitialAttributesOnChild",value:function(e){e=this._getInnerElement(e);var t=this._elemIsActive(e),n=this._getOuterElement(e);e.setAttribute("aria-selected",t),n!==e&&this._setAttributeIfNotExists(n,"role","presentation"),t||e.setAttribute("tabindex","-1"),this._setAttributeIfNotExists(e,"role","tab"),this._setInitialAttributesOnTargetPanel(e)}},{key:"_setInitialAttributesOnTargetPanel",value:function(e){var t=l(e);t&&(this._setAttributeIfNotExists(t,"role","tabpanel"),e.id&&this._setAttributeIfNotExists(t,"aria-labelledby","#".concat(e.id)))}},{key:"_toggleDropDown",value:function(e,t){var n=this._getOuterElement(e);if(n.classList.contains("dropdown")){var i=function(e,i){var r=le.findOne(e,n);r&&r.classList.toggle(i,t)};i(".dropdown-toggle",bi),i(".dropdown-menu",wi),i(".dropdown-item",bi),n.setAttribute("aria-expanded",t)}}},{key:"_setAttributeIfNotExists",value:function(e,t,n){e.hasAttribute(t)||e.setAttribute(t,n)}},{key:"_elemIsActive",value:function(e){return e.classList.contains(bi)}},{key:"_getInnerElement",value:function(e){return e.matches(Ei)?e:le.findOne(Ei,e)}},{key:"_getOuterElement",value:function(e){return e.closest(".nav-item, .list-group-item")||e}}],[{key:"NAME",get:function(){return"tab"}},{key:"jQueryInterface",value:function(e){return this.each((function(){var t=n.getOrCreateInstance(this);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError('No method named "'.concat(e,'"'));t[e]()}}))}}]),n}(J);R.on(document,di,Ti,(function(e){["A","AREA"].includes(this.tagName)&&e.preventDefault(),_(this)||Si.getOrCreateInstance(this).show()})),R.on(window,pi,(function(){var e,t=_createForOfIteratorHelper(le.find(Oi));try{for(t.s();!(e=t.n()).done;){var n=e.value;Si.getOrCreateInstance(n)}}catch(e){t.e(e)}finally{t.f()}})),k(Si);var Ii=".".concat("bs.toast"),Pi="mouseover".concat(Ii),Li="mouseout".concat(Ii),ji="focusin".concat(Ii),Ni="focusout".concat(Ii),Di="hide".concat(Ii),Mi="hidden".concat(Ii),Hi="show".concat(Ii),Fi="shown".concat(Ii),xi="hide",zi="show",Ri="showing",Bi={animation:"boolean",autohide:"boolean",delay:"number"},Wi={animation:!0,autohide:!0,delay:5e3},qi=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,i){var r;return _classCallCheck(this,n),(r=t.call(this,e,i))._timeout=null,r._hasMouseInteraction=!1,r._hasKeyboardInteraction=!1,r._setListeners(),r}return _createClass(n,[{key:"show",value:function(){var e=this;if(!R.trigger(this._element,Hi).defaultPrevented){this._clearTimeout(),this._config.animation&&this._element.classList.add("fade");this._element.classList.remove(xi),g(this._element),this._element.classList.add(zi,Ri),this._queueCallback((function(){e._element.classList.remove(Ri),R.trigger(e._element,Fi),e._maybeScheduleHide()}),this._element,this._config.animation)}}},{key:"hide",value:function(){var e=this;if(this.isShown()&&!R.trigger(this._element,Di).defaultPrevented){this._element.classList.add(Ri),this._queueCallback((function(){e._element.classList.add(xi),e._element.classList.remove(Ri,zi),R.trigger(e._element,Mi)}),this._element,this._config.animation)}}},{key:"dispose",value:function(){this._clearTimeout(),this.isShown()&&this._element.classList.remove(zi),_get(_getPrototypeOf(n.prototype),"dispose",this).call(this)}},{key:"isShown",value:function(){return this._element.classList.contains(zi)}},{key:"_maybeScheduleHide",value:function(){var e=this;this._config.autohide&&(this._hasMouseInteraction||this._hasKeyboardInteraction||(this._timeout=setTimeout((function(){e.hide()}),this._config.delay)))}},{key:"_onInteraction",value:function(e,t){switch(e.type){case"mouseover":case"mouseout":this._hasMouseInteraction=t;break;case"focusin":case"focusout":this._hasKeyboardInteraction=t}if(t)this._clearTimeout();else{var n=e.relatedTarget;this._element===n||this._element.contains(n)||this._maybeScheduleHide()}}},{key:"_setListeners",value:function(){var e=this;R.on(this._element,Pi,(function(t){return e._onInteraction(t,!0)})),R.on(this._element,Li,(function(t){return e._onInteraction(t,!1)})),R.on(this._element,ji,(function(t){return e._onInteraction(t,!0)})),R.on(this._element,Ni,(function(t){return e._onInteraction(t,!1)}))}},{key:"_clearTimeout",value:function(){clearTimeout(this._timeout),this._timeout=null}}],[{key:"Default",get:function(){return Wi}},{key:"DefaultType",get:function(){return Bi}},{key:"NAME",get:function(){return"toast"}},{key:"jQueryInterface",value:function(e){return this.each((function(){var t=n.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError('No method named "'.concat(e,'"'));t[e](this)}}))}}]),n}(J);return Z(qi),k(qi),{Alert:ie,Button:se,Carousel:qe,Collapse:it,Dropdown:St,Modal:cn,Offcanvas:On,Popover:$n,ScrollSpy:si,Tab:Si,Toast:qi,Tooltip:Xn}}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
